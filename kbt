#!/bin/bash

#
#	kbt v0.1.3
#

#
#	function builds a menu
#
#	takes 2 mandatory parameters:
#	 	$1 - menu text in the following format:
#			1. option 1
#			2. option 2
#			3. option 3
#			n. option n
#			0. Exit
#		$2 - value of n - amount of options apart of exit one
#
#		returns selected option in variable $menu_return
#
function menu() {
	menu_return=""

	if [[ -z $1 ]];	then
		echo "function menu() must have first parameter"
		exit
	fi

	if [[ -z $2 ]]; then
		echo "function menu() must have second parameter"
		exit
	fi

	while true; do
		clear
		cat <<- _EOF_
		$1
		_EOF_

		read -p "Enter the option [0-$2]: "
		if [ $REPLY -ge 0 ] && [ $REPLY -le $2 ]; then
			menu_return=$REPLY
			break
		else
			clear
			read -p "Invalid entry. Press any key to back to the menu or 0 for Exit. "
			if [[ $REPLY =~ ^0$ ]]; then
				menu_return=$REPLY
				break
			fi
		fi
	done

	return 0
}

function log_echo {
	local msg="[$(date '+%Y%m%d %H:%M:%S')]"

	if [[ ! -z $1 ]]; then
		msg="$msg --- $1 ---"
	fi
	echo $msg
}

function do_rsync {
	local msg=""
	if [[ -z $RS_PARAMS ]]; then
		msg="do sync"
	else
		msg="do sync test"
	fi

	local rsync_params=(-ahi --progress $RS_PARAMS --exclude-from=$RSYNC_EXCLUDE_FILE)
	local rsync_params_delete=("${rsync_params[@]}")
	rsync_params_delete+=( --delete)

	find $SOURCE_LOCAL_MIRROR -maxdepth 1 -type l -print0 |
		while IFS= read -r -d '' file; do
			filename="$(basename "$file")"

			source_local="$SOURCE_LOCAL_MIRROR/$filename/"
			dest_local="$DEST_LOCAL/$filename/"

			if [[ ! -d "$source_local" ]]; then
				log_echo "warning: source directory does not exist ($source_local), skipping..."
				continue
			fi

			log_echo "(begin) $msg from $source_local to $dest_local" >> $FILE_LOG
			log_echo "(begin) $msg from $source_local to $dest_local" >> $FILE_ERR_LOG

			rsync "${rsync_params_delete[@]}" "$source_local" "$dest_local" >> $FILE_LOG 2>> $FILE_ERR_LOG

			log_echo "(end) $msg from $source_local to $dest_local" >> $FILE_LOG
			log_echo "(end) $msg from $source_local to $dest_local" >> $FILE_ERR_LOG
		done


	find $SOURCE_LOCAL_UPDATE -maxdepth 1 -type l -print0 |
		while IFS= read -r -d '' file; do
			filename="$(basename "$file")"

			source_local="$SOURCE_LOCAL_UPDATE/$filename/"
			dest_local="$DEST_LOCAL/$filename/"

			if [[ ! -d "$source_local" ]]; then
				log_echo "warning: source directory does not exist ($source_local), skipping..."
				continue
			fi

			log_echo "(begin) $msg from $source_local to $dest_local" >> $FILE_LOG
			log_echo "(begin) $msg from $source_local to $dest_local" >> $FILE_ERR_LOG

			rsync "${rsync_params[@]}" "$source_local" "$dest_local" >> $FILE_LOG 2>> $FILE_ERR_LOG

			log_echo "(end) $msg from $source_local to $dest_local" >> $FILE_LOG
			log_echo "(end) $msg from $source_local to $dest_local" >> $FILE_ERR_LOG
		done
	return 0
}

function do_rsync_lan {
	local msg=""
	if [[ -z $RS_PARAMS ]]; then
		msg="do lan sync"
	else
		msg="do lan sync test"
	fi

	OLD_IFS=$IFS
	IFS=$'\n'
	lines_array=( $(head -n 2 "$DEST_LAN") )
	IFS=$OLD_IFS

	if [[ -z ${lines_array[0]} ]]; then
		log_echo "error: remote user name and host are not specified"
		log_echo "use the following format 'user_name@host'"
		log_echo "exiting..."
		exit 1
	fi

	if [[ -z ${lines_array[1]} ]]; then
		log_echo "remote port is not set, using default port number: 22"
		lines_array[1]=22
	fi

	local rsync_params=(-ahi --progress $RS_PARAMS --exclude-from=$RSYNC_EXCLUDE_FILE  --keep-dirlinks --rsh "ssh -o ConnectTimeout=1 -o ConnectionAttempts=3 -p ${lines_array[1]}")
	local rsync_params_delete=("${rsync_params[@]}")
	rsync_params_delete+=( --delete)

	find $SOURCE_LAN_MIRROR -maxdepth 1 -type l -print0 |
		while IFS= read -r -d '' file; do
			filename="$(basename "$file")"

			source_lan="$SOURCE_LAN_MIRROR/$filename/"
			dest_lan="${lines_array[0]}:$filename/"

			if [[ ! -d "$source_lan" ]]; then
				log_echo "warning: source directory does not exist ($source_lan), skipping..."
				continue
			fi

			log_echo "(begin) $msg from $source_lan to $dest_lan" >> $FILE_LOG
			log_echo "(begin) $msg from $source_lan to $dest_lan" >> $FILE_ERR_LOG
			log_echo "trying to establish connection to '${lines_array[0]}:${lines_array[1]}'..."

			rsync "${rsync_params_delete[@]}" "$source_lan" "$dest_lan" >> $FILE_LOG 2>> $FILE_ERR_LOG

			log_echo "(end) $msg from $source_lan to $dest_lan" >> $FILE_LOG
			log_echo "(end) $msg from $source_lan to $dest_lan" >> $FILE_ERR_LOG
		done
	
	find $SOURCE_LAN_UPDATE -maxdepth 1 -type l -print0 |
		while IFS= read -r -d '' file; do
			filename="$(basename "$file")"

			source_lan="$SOURCE_LAN_UPDATE/$filename/"
			dest_lan="${lines_array[0]}:$filename/"

			if [[ ! -d "$source_lan" ]]; then
				log_echo "warning: source directory does not exist ($source_lan), skipping..."
				continue
			fi

			log_echo "(begin) $msg from $source_lan to $dest_lan" >> $FILE_LOG
			log_echo "(begin) $msg from $source_lan to $dest_lan" >> $FILE_ERR_LOG

			rsync "${rsync_params[@]}" "$source_lan" "$dest_lan" >> $FILE_LOG 2>> $FILE_ERR_LOG

			log_echo "(end) $msg from $source_lan to $dest_lan" >> $FILE_LOG
			log_echo "(end) $msg from $source_lan to $dest_lan" >> $FILE_ERR_LOG
		done

	return 0
}

# makes sure that everything is flushed from cache
function do_drives_sync {
	log_echo "(begin) drives syncing..." >> $FILE_LOG
	sync
	log_echo "(end) drives syncing" >> $FILE_LOG
}

function create_dir_or_exit {
	if [[ -z $1 ]];	then
		log_echo "function create_dir_or_exit() must have one parameter, quitting..."
		exit 1
	fi

	mkdir -p "$1"
	if [[ $? -ne 0 ]]; then
		log_echo "error: failed to create directory ($1), quitting..."
		exit 1
	fi

	return 0
}

function create_settings_directory_structure {
	create_dir_or_exit "$SOURCE_LOCAL_MIRROR"
	create_dir_or_exit "$SOURCE_LOCAL_UPDATE"
	create_dir_or_exit "$SOURCE_LAN_MIRROR"
	create_dir_or_exit "$SOURCE_LAN_UPDATE"

	return 0
}

#	make sure that script's configuration is correct
function script_init {
	if [[ ! -d "$SETTINGS_DIR" ]]; then
		log_echo "settings directory structure does not exist ($SETTINGS_DIR), atempting to create it..."

		create_settings_directory_structure

		if [[ $? -ne 0 ]]; then
			log_echo "error: failed to create settings directory structure ($SETTINGS_DIR), quitting..."
			exit 1
		fi
	fi

	local mirror_files="$(($(ls "$SOURCE_LOCAL_MIRROR" | wc -l) + $(ls "$SOURCE_LAN_MIRROR" | wc -l)))"
	local update_files="$(($(ls "$SOURCE_LOCAL_UPDATE" | wc -l) + $(ls "$SOURCE_LAN_UPDATE" | wc -l)))"

	if [[ mirror_files -eq 0 ]] && [[ update_files -eq 0 ]]; then
		log_echo "error: settings directory is not set properly ($SETTINGS_DIR), quitting..."
		exit 1
	fi
}

function check_local_config {
	local mirror_files=$(ls "$SOURCE_LOCAL_MIRROR" | wc -l)
	local update_files=$(ls "$SOURCE_LOCAL_UPDATE" | wc -l)

	if [[ $? -ne 0 ]]; then
		log_echo "error: ls/wc failed to run, quitting..."
		exit 1
	fi

	if [[ mirror_files -eq 0 ]] && [[ update_files -eq 0 ]]; then
		log_echo "error: settings directory for local sync is not set properly ($SETTINGS_DIR), quitting..."
		exit 1
	fi

	if [[ ! -L $DEST_LOCAL ]]; then
		log_echo "error: destination symlink does not exist ($DEST_LOCAL), quitting..."
		exit 1
	fi

	if [[ ! -d $DEST_LOCAL ]]; then
		log_echo "error: destination directory is not accessible ($DEST_LOCAL), quitting..."
		exit 1
	fi
}

function check_lan_config {
	local mirror_files=$(ls "$SOURCE_LAN_MIRROR" | wc -l)
	local update_files=$(ls "$SOURCE_LAN_UPDATE" | wc -l)

	if [[ $? -ne 0 ]]; then
		log_echo "error: ls/wc failed to run, quitting..."
		exit 1
	fi

	if [[ mirror_files -eq 0 ]] && [[ update_files -eq 0 ]]; then
		log_echo "error: settings directory for lan sync is not set properly ($SETTINGS_DIR), quitting..."
		exit 1
	fi

	if [[ ! -f $DEST_LAN ]]; then
		log_echo "error: config for lan sync does not exist ($DEST_LAN), quitting..."
		exit 1
	fi
}

if (( $(id -u) == 0 )); then
	log_echo "error: for the sake of safety do not run the script with sudo privileges"
	exit 1
fi

#-----------constants and variables block
MESSAGE_START="Working..."
MESSAGE_END="Bye!"

FILE_LOG="./logs/kbt.log"
FILE_ERR_LOG="./logs/kbt_error.log"

SETTINGS_DIR="$HOME/.kbt"
SOURCE_LOCAL_MIRROR="$SETTINGS_DIR/local/mirror"
SOURCE_LOCAL_UPDATE="$SETTINGS_DIR/local/update"
DEST_LOCAL="$SETTINGS_DIR/local/dest"
SOURCE_LAN_MIRROR="$SETTINGS_DIR/lan/mirror"
SOURCE_LAN_UPDATE="$SETTINGS_DIR/lan/update"
DEST_LAN="$SETTINGS_DIR/lan/config.lan"

RS_PARAMS=""
RSYNC_EXCLUDE_FILE="./exclude.rsync"
#-----------/constants and variables block

script_init

menu_text="Script syncs source and destination folders where
 - source is \"$SETTINGS_DIR\"
 - destination is \"$DEST_LOCAL\"

All output logs into two files:
 - a regular log file: \"$FILE_LOG\"
 - an error log file: \"$FILE_ERR_LOG\"

WARNING! Run test options first to understand consequences first

Please select action:

1. sync test & exit
2. sync & exit
3. lan sync test & exit
4. lan sync & exit
0. exit
"

menu "$menu_text" 4

if [[ $menu_return -eq 0 ]]; then
	echo $MESSAGE_END
	exit 0
elif [[ $menu_return -eq 1 ]]; then
	echo $MESSAGE_START
	check_local_config
	RS_PARAMS="--dry-run"
	do_rsync
elif [[ $menu_return -eq 2 ]]; then
	echo $MESSAGE_START
	check_local_config
	RS_PARAMS=""
	do_rsync
	do_drives_sync
elif [[ $menu_return -eq 3 ]]; then
	echo $MESSAGE_START
	check_lan_config
	RS_PARAMS="--dry-run"
	do_rsync_lan
elif [[ $menu_return -eq 4 ]]; then
	echo $MESSAGE_START
	check_lan_config
	RS_PARAMS=""
	do_rsync_lan
fi

echo ""
echo $MESSAGE_END
exit 0