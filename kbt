#!/bin/bash

#
#	kbt v0.1.1
#

#
#	function builds a menu
#
#	takes 2 mandatory parameters:
#	 	$1 - menu text in the following format:
#			1. option 1
#			2. option 2
#			3. option 3
#			n. option n
#			0. Exit
#		$2 - value of n - amount of options apart of exit one
#
#		returns selected option in variable $menu_return
#
function menu() {
	menu_return=""

	if [[ -z $1 ]];	then
		echo "function menu() must have first parameter"
		exit
	fi

	if [[ -z $2 ]]; then
		echo "function menu() must have second parameter"
		exit
	fi

	while true; do
		clear
		cat <<- _EOF_
		$1
		_EOF_

		read -p "Enter the option [0-$2]: "
		if [ $REPLY -ge 0 ] && [ $REPLY -le $2 ]; then
			menu_return=$REPLY
			break
		else
			clear
			read -p "Invalid entry. Press any key to back to the menu or 0 for Exit. "
			if [[ $REPLY =~ ^0$ ]]; then
				menu_return=$REPLY
				break
			fi
		fi
	done

	return 0
}

function log_echo {
	local msg="[$(date '+%Y%m%d %H:%M:%S')]"

	if [[ ! -z $1 ]]; then
		msg="$msg ---$1---"
	fi
	echo $msg
}

function do_rsync {
	local msg=""
	if [[ -z $RS_PARAMS ]]; then
		msg="do sync"
	else
		msg="do sync test"
	fi

	if [[ ! -d $SOURCE ]]; then
		log_echo " error: source directory does not exist \"$SOURCE\" "
		log_echo " exiting... "
		exit 1
	elif [[ ! -d $DEST ]]; then
		log_echo " error: destination directory does not exist \"$DEST\" "
		log_echo " exiting... "
		exit 1
	fi

	local videos=""
	local music=""
	if [ "$OS_TYPE" = "mac" ]; then
		videos="videos"
		music="musics"
	elif [ "$OS_TYPE" = "linux" ]; then
		videos="Videos"
		music="Music"
	fi

	log_echo "(begin) $msg from $SOURCE to $DEST" >> $FILE_LOG
	log_echo "(begin) $msg from $SOURCE to $DEST" >> $FILE_ERR_LOG

	if [[ ! -d "$SOURCE/$videos/" ]]; then
		log_echo "source directory does not exists ($SOURCE/$videos/"
	else
		rsync -vahzi --delete --progress $RS_PARAMS "$SOURCE/$videos/" "$DEST/videos/" >> $FILE_LOG 2>> $FILE_ERR_LOG
	fi
	if [[ ! -d "$SOURCE/videos_seen/" ]]; then
		log_echo "source directory does not exists ($SOURCE/videos_seen/"
	else
		rsync -vahzi --progress $RS_PARAMS "$SOURCE/videos_seen/" "$DEST/videos_seen/" >> $FILE_LOG 2>> $FILE_ERR_LOG
	fi
	if [[ ! -d "$SOURCE/$music/" ]]; then
		log_echo "source directory does not exists ($SOURCE/$music/"
	else
		rsync -vahzi --delete --progress $RS_PARAMS "$SOURCE/$music/" "$DEST/musics/" >> $FILE_LOG 2>> $FILE_ERR_LOG
	fi
	if [[ ! -d "$SOURCE/trainings/" ]]; then
		log_echo "source directory does not exists ($SOURCE/trainings/"
	else
		rsync -vahzi --delete --progress $RS_PARAMS "$SOURCE/trainings/" "$DEST/trainings/" >> $FILE_LOG 2>> $FILE_ERR_LOG
	fi
	if [[ ! -d "$SOURCE/cloud/" ]]; then
		log_echo "source directory does not exists ($SOURCE/cloud/"
	else
		rsync -vahzi --delete --progress $RS_PARAMS "$SOURCE/cloud/" "$DEST/cloud/" >> $FILE_LOG 2>> $FILE_ERR_LOG
	fi

	log_echo "(end) $msg from $SOURCE to $DEST" >> $FILE_LOG
	log_echo "(end) $msg from $SOURCE to $DEST" >> $FILE_ERR_LOG

	return 0
}

# cleans $1 directory
function do_cleanup {
	local directory=$1

	if [[ -z $directory ]]; then
		echo "function do_cleanup() must have one parameter"
		exit
	fi

	if [[ ! -d $directory ]]; then
		log_echo "dest directory does not exist ($DEST)"
		exit 1
	fi

	log_echo "(begin) cleanup ($directory)" >> $FILE_LOG
	log_echo "(begin) cleanup ($directory)" >> $FILE_ERR_LOG

	find "$directory/videos/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/videos/" -name ".DS_Store" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG

	find "$directory/videos_seen/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/videos_seen/" -name ".DS_Store" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG

	find "$directory/musics/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/musics/" -name ".DS_Store" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG

	find "$directory/trainings/Japanese/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/trainings/body/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/trainings/" -name ".DS_Store" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG

	find "$directory/cloud/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/cloud/" -name ".DS_Store" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG

	log_echo "(end) cleanup ($directory)" >> $FILE_LOG
	log_echo "(end) cleanup ($directory)" >> $FILE_ERR_LOG

	return 0
}

# makes sure that everything is flushed from cache
function do_drives_sync {
	log_echo "(begin) drives syncing..." >> $FILE_LOG
	sync
	log_echo "(end) drives syncing" >> $FILE_LOG
}

function get_os_type {
	OS_TYPE=""
	local uname_out="$(uname -s)"
	case "${uname_out}" in
		Darwin*)	OS_TYPE="mac";;
		Linux*)	OS_TYPE="linux";;
		*)	OS_TYPE="";;
	esac
}

if (( $(id -u) != 0 )); then
	echo "Run script with sudo privileges"
	exit
fi

#-----------constants and variables block
OS_TYPE=""
get_os_type
if [[ -z OS_TYPE ]]; then
	echo "Unknown OS type. Exit..."
	exit
fi

MESSAGE_START="Working..."
MESSAGE_END="Bye!"

FILE_LOG="kbt.log"
FILE_ERR_LOG="kbt_error.log"

if [ "$OS_TYPE" = "mac" ]; then
	SOURCE="/Volumes/kudoji-hdd"
	DEST="/Volumes/kudoji-wd"
elif [ "$OS_TYPE" = "linux" ]; then
	SOURCE="/home/kudoji"
	DEST="/media/kudoji/kudoji-wd"
else
	echo "Unknown OS type. Exit..."
	exit
fi

RS_PARAMS=""
#-----------/constants and variables block

menu_text="Script syncs source and destination folders where
 - source is \"$SOURCE\"
 - destination is \"$DEST\"

All output saves into two files:
 - a log file: \"$FILE_LOG\"
 - an error log file: \"$FILE_ERR_LOG\"

WARNING! Script makes the destination folder identical to the source

Please select action:

1. sync test & exit
2. sync & exit
3. cleanup dest directory
4. cleanup source directory
0. exit
"

menu "$menu_text" 4

if [[ $menu_return -eq 0 ]]; then
	echo $MESSAGE_END
	exit 0
elif [[ $menu_return -eq 1 ]]; then
	echo $MESSAGE_START
	RS_PARAMS="--dry-run"
	do_rsync
elif [[ $menu_return -eq 2 ]]; then
	echo $MESSAGE_START
	do_rsync
	do_cleanup "$DEST"
	do_drives_sync
elif [[ $menu_return -eq 3 ]]; then
	echo $MESSAGE_START
	do_cleanup "$DEST"
	do_drives_sync
elif [[ $menu_return -eq 4 ]]; then
	echo $MESSAGE_START
	do_cleanup "$SOURCE"
	do_drives_sync
fi

echo ""
echo $MESSAGE_END
exit 0