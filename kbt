#!/bin/bash

#
#	kbt v0.1.3
#

#
#	function builds a menu
#
#	takes 2 mandatory parameters:
#	 	$1 - menu text in the following format:
#			1. option 1
#			2. option 2
#			3. option 3
#			n. option n
#			0. Exit
#		$2 - value of n - amount of options apart of exit one
#
#		returns selected option in variable $menu_return
#
function menu() {
	menu_return=""

	if [[ -z $1 ]];	then
		echo "function menu() must have first parameter"
		exit
	fi

	if [[ -z $2 ]]; then
		echo "function menu() must have second parameter"
		exit
	fi

	while true; do
		clear
		cat <<- _EOF_
		$1
		_EOF_

		read -p "Enter the option [0-$2]: "
		if [ $REPLY -ge 0 ] && [ $REPLY -le $2 ]; then
			menu_return=$REPLY
			break
		else
			clear
			read -p "Invalid entry. Press any key to back to the menu or 0 for Exit. "
			if [[ $REPLY =~ ^0$ ]]; then
				menu_return=$REPLY
				break
			fi
		fi
	done

	return 0
}

function log_echo {
	local msg="[$(date '+%Y%m%d %H:%M:%S')]"

	if [[ ! -z $1 ]]; then
		msg="$msg --- $1 ---"
	fi
	echo $msg
}

function do_rsync {
	local msg=""
	if [[ -z $RS_PARAMS ]]; then
		msg="do sync"
	else
		msg="do sync test"
	fi

	local videos=""
	local music=""
	if [ "$OS_TYPE" = "mac" ]; then
		videos="videos"
		music="musics"
	elif [ "$OS_TYPE" = "linux" ]; then
		videos="Videos"
		music="Music"
	fi

	local rsync_params=(-ahi --progress --copy-dirlinks $RS_PARAMS --exclude-from=$RSYNC_EXCLUDE_FILE)
	local rsync_params_delete=("${rsync_params[@]}")
	rsync_params_delete+=( --delete)

	log_echo "(begin) $msg from $SOURCE_LOCAL_MIRROR to $DEST" >> $FILE_LOG
	log_echo "(begin) $msg from $SOURCE_LOCAL_MIRROR to $DEST" >> $FILE_ERR_LOG

	find $SOURCE_LOCAL_MIRROR -maxdepth 1 -type l -print0 |
		while IFS= read -r -d '' file; do
			filename="$(basename "$file")"
			rsync "${rsync_params_delete[@]}" "$SOURCE_LOCAL_MIRROR/$filename/" "$DEST/$filename/" >> $FILE_LOG 2>> $FILE_ERR_LOG
		done
	log_echo "(end) $msg from $SOURCE_LOCAL_MIRROR to $DEST" >> $FILE_LOG
	log_echo "(end) $msg from $SOURCE_LOCAL_MIRROR to $DEST" >> $FILE_ERR_LOG


	log_echo "(begin) $msg from $SOURCE_LOCAL_UPDATE to $DEST" >> $FILE_LOG
	log_echo "(begin) $msg from $SOURCE_LOCAL_UPDATE to $DEST" >> $FILE_ERR_LOG

	find $SOURCE_LOCAL_UPDATE -maxdepth 1 -type l -print0 |
		while IFS= read -r -d '' file; do
			filename="$(basename "$file")"
			rsync "${rsync_params[@]}" "$SOURCE_LOCAL_UPDATE/$filename/" "$DEST/$filename/" >> $FILE_LOG 2>> $FILE_ERR_LOG
		done

	log_echo "(end) $msg from $SOURCE_LOCAL_UPDATE to $DEST" >> $FILE_LOG
	log_echo "(end) $msg from $SOURCE_LOCAL_UPDATE to $DEST" >> $FILE_ERR_LOG

	return 0
}

function do_rsync_lan {
	local msg=""
	if [[ -z $RS_PARAMS ]]; then
		msg="do lan sync"
	else
		msg="do lan sync test"
	fi

	if [[ ! -f "./$CONFIG" ]]; then
		log_echo "error: config file: '$CONFIG' does not exist"
		log_echo " exiting... "
		exit 1
	fi

	OLD_IFS=$IFS
	IFS=$'\n'
	lines_array=( $(head -n 2 "./$CONFIG") )
	IFS=$OLD_IFS

	if [[ -z ${lines_array[0]} ]]; then
		log_echo "error: remote user name and host are not specified"
		log_echo "use the following format 'user_name@host'"
		log_echo " exiting... "
		exit 1
	fi

	if [[ -z ${lines_array[1]} ]]; then
		log_echo "remote port is not set, using default port number: 22"
		lines_array[1]=22
	fi

	local rsync_params=(-ahi --progress $RS_PARAMS --exclude-from=$RSYNC_EXCLUDE_FILE --rsh "ssh -p ${lines_array[1]}")
	local rsync_params_delete=("${rsync_params[@]}")
	rsync_params_delete+=( --delete)

	log_echo "trying to establish connection to '${lines_array[0]}:${lines_array[1]}'..."

	rsync "${rsync_params_delete[@]}" "$SOURCE/cloud/Dropbox/" "${lines_array[0]}:cloud/Dropbox/" >> $FILE_LOG 2>> $FILE_ERR_LOG

	return 0
}

# cleans $1 directory
function do_cleanup {
	local directory=$1

	if [[ -z $directory ]]; then
		echo "function do_cleanup() must have one parameter"
		exit
	fi

	if [[ ! -d $directory ]]; then
		log_echo "dest directory does not exist ($DEST)"
		exit 1
	fi

	log_echo "(begin) cleanup ($directory)" >> $FILE_LOG
	log_echo "(begin) cleanup ($directory)" >> $FILE_ERR_LOG

	find "$directory/videos/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/videos/" -name ".DS_Store" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG

	find "$directory/videos_seen/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/videos_seen/" -name ".DS_Store" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG

	find "$directory/musics/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/musics/" -name ".DS_Store" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG

	find "$directory/trainings/Japanese/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/trainings/body/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/trainings/" -name ".DS_Store" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG

	find "$directory/cloud/" -name "._*" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG
	find "$directory/cloud/" -name ".DS_Store" -delete -print >> $FILE_LOG 2>> $FILE_ERR_LOG

	log_echo "(end) cleanup ($directory)" >> $FILE_LOG
	log_echo "(end) cleanup ($directory)" >> $FILE_ERR_LOG

	return 0
}

# makes sure that everything is flushed from cache
function do_drives_sync {
	log_echo "(begin) drives syncing..." >> $FILE_LOG
	sync
	log_echo "(end) drives syncing" >> $FILE_LOG
}

function get_os_type {
	OS_TYPE=""
	local uname_out="$(uname -s)"
	case "${uname_out}" in
		Darwin*)	OS_TYPE="mac";;
		Linux*)	OS_TYPE="linux";;
		*)	OS_TYPE="";;
	esac
}

#	make sure that script's configuration is correct
function script_init {
	if [[ ! -d "$SOURCE" ]]; then
		log_echo "error: source directory does not exist ($SOURCE), exitting..."
		exit 1
	fi

	if [[ ! -d "$SOURCE_LOCAL_MIRROR" ]]; then
		log_echo "error: mirror directory does not exist in source ($SOURCE_LOCAL_MIRROR), exitting..."
		exit 1
	fi

	if [[ ! -d "$SOURCE_LOCAL_UPDATE" ]]; then
		log_echo "error: update directory does not exist in source ($SOURCE_LOCAL_UPDATE), exitting..."
		exit 1
	fi

	if [[ ! -d "$SOURCE_LAN_MIRROR" ]]; then
		log_echo "error: mirror directory does not exist in source ($SOURCE_LAN_MIRROR), exitting..."
		exit 1
	fi

	if [[ ! -d "$SOURCE_LAN_UPDATE" ]]; then
		log_echo "error: update directory does not exist in source ($SOURCE_LAN_UPDATE), exitting..."
		exit 1
	fi

	local mirror_files=$(ls "$SOURCE_LOCAL_MIRROR" | wc -l)+$(ls "$SOURCE_LAN_MIRROR" | wc -l)
	local update_files=$(ls "$SOURCE_LOCAL_UPDATE" | wc -l)+$(ls "$SOURCE_LAN_UPDATE" | wc -l)

	if [[ mirror_files -eq 0 ]] && [[ update_files -eq 0 ]]; then
		log_echo "error: source directory is not set properly ($SOURCE), exitting..."
		exit 1
	fi
}

function check_local_config {
	local mirror_files=$(ls "$SOURCE_LOCAL_MIRROR" | wc -l)
	local update_files=$(ls "$SOURCE_LOCAL_UPDATE" | wc -l)

	if [[ $? -ne 0 ]]; then
		log_echo "error: ls/wc failed to run, exitting..."
		exit 1
	fi

	if [[ mirror_files -eq 0 ]] && [[ update_files -eq 0 ]]; then
		log_echo "error: source directory for local sync is not set properly ($SOURCE), exitting..."
		exit 1
	fi

	if [[ ! -d $DEST ]]; then
		log_echo "error: destination directory does not exist ($DEST), exitting..."
		exit 1
	fi
}

function check_lan_config {
	local mirror_files=$(ls "$SOURCE_LAN_MIRROR" | wc -l)
	local update_files=$(ls "$SOURCE_LAN_UPDATE" | wc -l)

	if [[ $? -ne 0 ]]; then
		log_echo "error: ls/wc failed to run, exitting..."
		exit 1
	fi

	if [[ mirror_files -eq 0 ]] && [[ update_files -eq 0 ]]; then
		log_echo "error: source directory for lan sync is not set properly ($SOURCE), exitting..."
		exit 1
	fi
}

if (( $(id -u) != 0 )); then
	echo "Run script with sudo privileges"
	exit
fi

#-----------constants and variables block
OS_TYPE=""
get_os_type
if [[ -z OS_TYPE ]]; then
	echo "Unknown OS type. Exit..."
	exit 2
fi

MESSAGE_START="Working..."
MESSAGE_END="Bye!"

FILE_LOG="./logs/kbt.log"
FILE_ERR_LOG="./logs/kbt_error.log"

SOURCE="./kbt_backup"
SOURCE_LOCAL_MIRROR="$SOURCE/local/mirror"
SOURCE_LOCAL_UPDATE="$SOURCE/local/update"
SOURCE_LAN_MIRROR="$SOURCE/lan/mirror"
SOURCE_LAN_UPDATE="$SOURCE/lan/update"

if [ "$OS_TYPE" = "mac" ]; then
	DEST="/Volumes/kudoji-wd"
elif [ "$OS_TYPE" = "linux" ]; then
	DEST="/media/kudoji/kudoji-wd"
else
	echo "Unknown OS type. Exit..."
	exit 2
fi
DEST="/Volumes/kudoji-hdd/kbt_test"

RS_PARAMS=""
CONFIG="./config.lan"
RSYNC_EXCLUDE_FILE="./exclude.rsync"
#-----------/constants and variables block

script_init

menu_text="Script syncs source and destination folders where
 - source is \"$SOURCE\"
 - destination is \"$DEST\"

All output saves into two files:
 - a log file: \"$FILE_LOG\"
 - an error log file: \"$FILE_ERR_LOG\"

WARNING! Script makes the destination folder identical to the source

Please select action:

1. sync test & exit
2. sync & exit
3. cleanup dest directory
4. cleanup source directory
5. lan sync test & exit
6. lan sync & exit
0. exit
"

menu "$menu_text" 6

if [[ $menu_return -eq 0 ]]; then
	echo $MESSAGE_END
	exit 0
elif [[ $menu_return -eq 1 ]]; then
	echo $MESSAGE_START
	check_local_config
	RS_PARAMS="--dry-run"
	do_rsync
elif [[ $menu_return -eq 2 ]]; then
	echo $MESSAGE_START
	check_local_config
	RS_PARAMS=""
	do_rsync
	do_cleanup "$DEST"
	do_drives_sync
elif [[ $menu_return -eq 3 ]]; then
	echo $MESSAGE_START
	do_cleanup "$DEST"
	do_drives_sync
elif [[ $menu_return -eq 4 ]]; then
	echo $MESSAGE_START
	do_cleanup "$SOURCE"
	do_drives_sync
elif [[ $menu_return -eq 5 ]]; then
	echo $MESSAGE_START
	check_lan_config
	RS_PARAMS="--dry-run"
	do_rsync_lan
elif [[ $menu_return -eq 6 ]]; then
	echo $MESSAGE_START
	check_lan_config
	RS_PARAMS=""
	do_rsync_lan
fi

echo ""
echo $MESSAGE_END
exit 0